{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to ResumeParser Pro Documentation","text":"<p>ResumeParser Pro is a production-ready, AI-powered library for extracting structured data from resumes. Built for accuracy and speed, it handles multiple file formats\u2014including PDFs, DOCX, and even images\u2014and leverages the power of modern Large Language Models (LLMs) to deliver clean, validated JSON output.</p> <p>This library is designed for developers, recruiters, and HR tech builders who need a reliable and scalable resume parsing solution.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>High-Accuracy Extraction: Leverages sophisticated LLMs to extract over 20 distinct fields with high precision.</li> <li>Broad File Support: Parses everything from standard PDFs and DOCX files to scanned images (<code>.png</code>, <code>.jpg</code>) and web formats (<code>.html</code>).</li> <li>Parallel Processing: Blazing-fast batch processing to handle thousands of resumes efficiently.</li> <li>Structured &amp; Validated Data: Outputs are Pydantic models, ensuring the data you receive is structured, typed, and validated.</li> <li>Provider Agnostic: Works with any LangChain-compatible model provider, including OpenAI, Google Gemini, Anthropic, and local models via Ollama.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Installation: Learn how to install the library and its optional dependencies.</li> <li>Quickstart Guide: Get up and running by parsing your first resume in minutes.</li> <li>API Reference: Explore the detailed reference for all classes, methods, and data models.</li> </ul>"},{"location":"api_reference/","title":"API Reference","text":"<p>This section provides a detailed look at the classes, methods, and data structures available in ResumeParser Pro.</p>"},{"location":"api_reference/#resumeparserpro-class","title":"<code>ResumeParserPro</code> Class","text":"<p>This is the main class for parsing resumes.</p> <p>resumeparser_pro.ResumeParserPro( provider: str, model_name: str, api_key: str, max_workers: int = 5, temperature: float = 0.1 )</p>"},{"location":"api_reference/#initialization-parameters","title":"Initialization Parameters","text":"Parameter Type Description <code>provider</code> <code>str</code> Required. The name of the LLM provider (e.g., <code>\"openai\"</code>, <code>\"google_genai\"</code>, <code>\"anthropic\"</code>, <code>\"ollama\"</code>). <code>model_name</code> <code>str</code> Required. The specific model to use (e.g., <code>\"gpt-4o-mini\"</code>, <code>\"gemini-1.5-pro\"</code>). <code>api_key</code> <code>str</code> Required. Your API key for the specified provider. Use <code>\"NA\"</code> or an empty string for local providers like Ollama. <code>max_workers</code> <code>int</code> The number of parallel threads to use for batch processing. Defaults to <code>5</code>. <code>temperature</code> <code>float</code> The model's temperature for generation (0.0 for deterministic, &gt;0 for creative). Defaults to <code>0.1</code>."},{"location":"api_reference/#methods","title":"Methods","text":""},{"location":"api_reference/#parse_resume","title":"<code>parse_resume()</code>","text":"<p>Parses a single resume file.</p> <p>.parse_resume(file_path: Union[str, Path]) -&gt; ParsedResumeResult</p> <ul> <li>file_path: The local path to the resume file.</li> <li>Returns: A <code>ParsedResumeResult</code> object containing the outcome.</li> </ul>"},{"location":"api_reference/#parse_batch","title":"<code>parse_batch()</code>","text":"<p>Parses a list of resume files in parallel.</p> <p>.parse_batch(file_paths: List[Union[str, Path]]) -&gt; List[ParsedResumeResult] -   file_paths: A list of local paths to the resume files. -   Returns: A list of <code>ParsedResumeResult</code> objects, one for each file.</p>"},{"location":"api_reference/#get_successful_resumes","title":"<code>get_successful_resumes()</code>","text":"<p>A convenience method to filter a list of results from a batch job.</p> <p>.get_successful_resumes(results: List[ParsedResumeResult]) -&gt; List[Dict[str, Any]] -   results: The list of <code>ParsedResumeResult</code> objects returned by <code>parse_batch()</code>. -   Returns: A list of dictionaries, where each dictionary is the structured data of a successfully parsed resume.</p>"},{"location":"api_reference/#data-models","title":"Data Models","text":"<p>The library uses Pydantic models to ensure that all output is structured and validated.</p>"},{"location":"api_reference/#parsedresumeresult-model","title":"<code>ParsedResumeResult</code> Model","text":"<p>This is the top-level wrapper for any parsing result.</p> Field Type Description <code>file_path</code> <code>str</code> The path of the processed resume file. <code>success</code> <code>bool</code> <code>True</code> if parsing was successful, <code>False</code> otherwise. <code>resume_data</code> <code>ResumeSchema</code> The structured resume data. <code>None</code> if parsing failed. <code>error_message</code> <code>str</code> The error message if parsing failed. <code>None</code> if successful. <code>parsing_time_seconds</code> <code>float</code> The total time taken to parse the file. <code>timestamp</code> <code>str</code> The ISO 8601 timestamp of when the parsing finished."},{"location":"api_reference/#resumeschema-model","title":"<code>ResumeSchema</code> Model","text":"<p>This model contains all the extracted fields from the resume.</p> Field Type Description <code>contact_info</code> <code>ContactInfo</code> The candidate's contact details. <code>professional_summary</code> <code>str</code> The professional summary or objective statement. <code>skills</code> <code>List[Skill]</code> A list of categorized skills. <code>work_experience</code> <code>List[Experience]</code> A list of work experiences. <code>education</code> <code>List[Education]</code> A list of educational qualifications. <code>projects</code> <code>List[Project]</code> A list of personal or professional projects. <code>certifications</code> <code>List[Certification]</code> A list of certifications. <code>languages</code> <code>List[Language]</code> A list of languages spoken by the candidate. <code>total_experience_months</code> <code>int</code> The calculated total work experience in integer months. <code>industry</code> <code>str</code> The primary industry of the candidate's experience. <code>seniority_level</code> <code>str</code> The assessed seniority level (e.g., \"Junior\", \"Senior\"). (and others...) <code>publications</code>, <code>awards</code>, <code>interests</code>, etc."},{"location":"installation/","title":"Installation Guide","text":"<p>Installing ResumeParser Pro is straightforward. You can choose a core installation or install optional extras for extended file format support.</p>"},{"location":"installation/#core-installation","title":"Core Installation","text":"<p>The core library provides support for the most common resume formats: <code>.pdf</code>, <code>.docx</code>, and <code>.txt</code>.</p> <p>pip install ai-resume-parser</p>"},{"location":"installation/#full-installation-recommended","title":"Full Installation (Recommended)","text":"<p>To enable all supported file formats, including images (OCR), HTML, and OpenDocument Text (ODT), install the <code>[full]</code> extra:</p>"},{"location":"installation/#optional-extras","title":"Optional Extras","text":"<p>You can also install support for specific file types individually:</p> <ul> <li>For Image Parsing (OCR):     <code>pip install ai-resume-parser[ocr]</code></li> <li>For HTML Parsing:     <code>pip install ai-resume-parser[html]</code></li> <li>For OpenDocument (ODT) Parsing:     <code>pip install ai-resume-parser[odt]</code></li> </ul>"},{"location":"installation/#mandatory-requirement-for-image-parsing","title":"\u2757\ufe0f Mandatory Requirement for Image Parsing","text":"<p>To parse images (<code>.png</code>, <code>.jpg</code>, etc.), you must have the Google Tesseract OCR engine installed on your system. The Python library <code>pytesseract</code> is just a wrapper for this engine.</p> <ul> <li>Windows: Download the installer from the official Tesseract at UB Mannheim page.</li> <li>macOS (via Homebrew): <code>brew install tesseract</code></li> <li>Linux (Debian/Ubuntu): <code>sudo apt-get install tesseract-ocr</code></li> </ul> <p>After installation, ensure the <code>tesseract</code> command is available in your system's PATH.</p>"},{"location":"quickstart/","title":"Quickstart Guide","text":"<p>This guide will walk you through the basic steps to parse a resume using ResumeParser Pro.</p>"},{"location":"quickstart/#1-initialize-the-parser","title":"1. Initialize the Parser","text":"<p>First, import and initialize the <code>ResumeParserPro</code> class. You'll need to provide three key things: 1.  The AI <code>provider</code> (e.g., <code>\"openai\"</code>, <code>\"google_genai\"</code>). 2.  The <code>model_name</code> (e.g., <code>\"gpt-4o-mini\"</code>, <code>\"gemini-1.5-pro\"</code>). 3.  Your <code>api_key</code> for that provider.</p> <p>from resumeparser_pro import ResumeParserPro</p> <p>parser = ResumeParserPro( provider=\"openai\", model_name=\"gpt-4o-mini\", api_key=\"sk-...\" # Your OpenAI API Key )</p>"},{"location":"quickstart/#2-parse-a-single-resume","title":"2. Parse a Single Resume","text":"<p>Use the <code>parse_resume()</code> method to process a single file. It supports various formats like PDF, DOCX, and even PNG or JPG files if you installed the <code>[ocr]</code> extra.</p> <p>Path to the resume file resume_path = \"path/to/my_resume.pdf\"</p> <p>Parse the file result = parser.parse_resume(resume_path)</p> <p>The result object contains all the information if result.success: print(\"Parsing was successful!\")</p>"},{"location":"quickstart/#access-the-structured-data","title":"Access the structured data","text":"<p>contact_info = result.resume_data.contact_info experience = result.resume_data.work_experience</p> <p>print(f\"Candidate Name: {contact_info.full_name}\") print(f\"Email: {contact_info.email}\") print(f\"Total Experience: {result.resume_data.total_experience_months} months\")</p>"},{"location":"quickstart/#print-the-first-job-title","title":"Print the first job title","text":"<p>if experience:     print(f\"Latest Job: {experience.job_title} at {experience.company}\") else: print(f\"Parsing failed. Error: {result.error_message}\")</p>"},{"location":"quickstart/#3-parse-multiple-resumes-in-a-batch","title":"3. Parse Multiple Resumes in a Batch","text":"<p>For handling multiple files, the <code>parse_batch()</code> method is highly efficient as it processes files in parallel.</p> <p>file_paths = [ \"resumes/resume_of_dev1.pdf\", \"resumes/resume_of_dev2.docx\", \"resumes/scanned_resume_of_dev3.png\" ]</p> <p>Process the entire batch batch_results = parser.parse_batch(file_paths)</p> <p>print(f\"Processed {len(batch_results)} resumes.\")</p> <p>You can easily filter for successful results successful_parses = [res for res in batch_results if res.success]</p> <p>for parsed_resume in successful_parses: print(f\"Successfully parsed: {parsed_resume.file_path}\") print(f\" - Name: {parsed_resume.resume_data.contact_info.full_name}\\n\") undefined</p>"}]}